// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using UserAuthentication.Models;

#nullable disable

namespace UserAuthentication.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20241001021213_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("UserAuthentication.Models.EmailValidationStatus", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<bool?>("IsValidated")
                        .HasColumnType("boolean")
                        .HasColumnName("isValidated");

                    b.Property<string>("StatusDescription")
                        .HasColumnType("text")
                        .HasColumnName("status_description");

                    b.HasKey("Id");

                    b.ToTable("email_validation_status");
                });

            modelBuilder.Entity("UserAuthentication.Models.ExternalProvider", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("ProviderName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("provider_name");

                    b.Property<string>("WSEndpoint")
                        .HasColumnType("text")
                        .HasColumnName("ws_endpoint");

                    b.HasKey("Id");

                    b.ToTable("external_providers");
                });

            modelBuilder.Entity("UserAuthentication.Models.GrantedPermission", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("PermissionId")
                        .HasColumnType("bigint")
                        .HasColumnName("permission_id");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint")
                        .HasColumnName("role_id");

                    b.HasKey("Id");

                    b.HasIndex("PermissionId");

                    b.HasIndex("RoleId");

                    b.ToTable("granted_permissions");
                });

            modelBuilder.Entity("UserAuthentication.Models.HashAlgorithm", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("AlgorithmName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("algorithm_name");

                    b.HasKey("Id");

                    b.ToTable("hashing_algorithms");
                });

            modelBuilder.Entity("UserAuthentication.Models.Permission", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("PermissionDescription")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("permissions_description");

                    b.HasKey("Id");

                    b.ToTable("permissions");
                });

            modelBuilder.Entity("UserAuthentication.Models.Role", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("role_name");

                    b.HasKey("Id");

                    b.HasIndex("RoleName")
                        .IsUnique();

                    b.ToTable("user_roles");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            RoleName = "admin"
                        },
                        new
                        {
                            Id = 2L,
                            RoleName = "user"
                        },
                        new
                        {
                            Id = 3L,
                            RoleName = "guest"
                        },
                        new
                        {
                            Id = 4L,
                            RoleName = "viewer"
                        });
                });

            modelBuilder.Entity("UserAuthentication.Models.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint")
                        .HasColumnName("role_id");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("chat_user");
                });

            modelBuilder.Entity("UserAuthentication.Models.UserLogin", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("ConfirmationToken")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("confirmation_token");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("email");

                    b.Property<long>("EmailValidationId")
                        .HasColumnType("bigint")
                        .HasColumnName("email_validation_status_id");

                    b.Property<long?>("HashAlgorithmId")
                        .HasColumnType("bigint")
                        .HasColumnName("hash_algorithm_id");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("password_hash");

                    b.Property<string>("PasswordRecoveryToken")
                        .HasColumnType("text")
                        .HasColumnName("password_recovery_token");

                    b.Property<string>("PasswordSalt")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("password_salt");

                    b.Property<DateTime?>("RecoveryTokenTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("recovery_token_time");

                    b.Property<DateTime>("TokenGenerationTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("token_generation_time");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("username");

                    b.HasKey("Id");

                    b.HasIndex("EmailValidationId");

                    b.HasIndex("HashAlgorithmId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("user_login");
                });

            modelBuilder.Entity("UserAuthentication.Models.UserLoginDataExternal", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("ExternalProviderId")
                        .HasColumnType("bigint")
                        .HasColumnName("external_provider_id");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("ExternalProviderId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("user_login_data_external");
                });

            modelBuilder.Entity("UserAuthentication.Models.UserState", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<bool>("Authenticated")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("ExpiryTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expiry_time");

                    b.Property<string>("StateUUID")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("state_uuid");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("user_state");
                });

            modelBuilder.Entity("UserAuthentication.Models.GrantedPermission", b =>
                {
                    b.HasOne("UserAuthentication.Models.Permission", "Permission")
                        .WithMany("GrantedPermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UserAuthentication.Models.Role", "Role")
                        .WithMany("GrantedPermissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("UserAuthentication.Models.User", b =>
                {
                    b.HasOne("UserAuthentication.Models.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("UserAuthentication.Models.UserLogin", b =>
                {
                    b.HasOne("UserAuthentication.Models.EmailValidationStatus", "EmailValidationStatus")
                        .WithMany()
                        .HasForeignKey("EmailValidationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UserAuthentication.Models.HashAlgorithm", "HashAlgorithm")
                        .WithMany()
                        .HasForeignKey("HashAlgorithmId");

                    b.HasOne("UserAuthentication.Models.User", "User")
                        .WithOne("UserLogin")
                        .HasForeignKey("UserAuthentication.Models.UserLogin", "UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("EmailValidationStatus");

                    b.Navigation("HashAlgorithm");

                    b.Navigation("User");
                });

            modelBuilder.Entity("UserAuthentication.Models.UserLoginDataExternal", b =>
                {
                    b.HasOne("UserAuthentication.Models.ExternalProvider", "ExternalProvider")
                        .WithMany("UserLoginDataExternals")
                        .HasForeignKey("ExternalProviderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UserAuthentication.Models.User", "User")
                        .WithOne("UserLoginDataExternal")
                        .HasForeignKey("UserAuthentication.Models.UserLoginDataExternal", "UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("ExternalProvider");

                    b.Navigation("User");
                });

            modelBuilder.Entity("UserAuthentication.Models.UserState", b =>
                {
                    b.HasOne("UserAuthentication.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("UserAuthentication.Models.ExternalProvider", b =>
                {
                    b.Navigation("UserLoginDataExternals");
                });

            modelBuilder.Entity("UserAuthentication.Models.Permission", b =>
                {
                    b.Navigation("GrantedPermissions");
                });

            modelBuilder.Entity("UserAuthentication.Models.Role", b =>
                {
                    b.Navigation("GrantedPermissions");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("UserAuthentication.Models.User", b =>
                {
                    b.Navigation("UserLogin");

                    b.Navigation("UserLoginDataExternal");
                });
#pragma warning restore 612, 618
        }
    }
}
